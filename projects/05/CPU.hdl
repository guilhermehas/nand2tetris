/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux16(a=instruction, b=AluOut, sel=instruction[0], out=inA);

        ARegister(in=inA, load=instruction[10], out=outA, out[0..14]=addressM);
        Mux16(a=inM, b=outA, sel=instruction[0], out=inAlu2);

        DRegister(in=AluOut, load=instruction[11], out=inAlu1);
        ALU(x=inAlu1, y=inAlu2, 
            zx=instruction[5], nx=instruction[6], zy=instruction[7], ny=instruction[8], f=instruction[9], no=instruction[10], 
            out=outM, out=AluOut, zr=zr, ng=ng);
        
        Or(a=zr, b=ng, out=npos);
        Not(in=npos, out=pos);
        And(a=instruction[13], b=ng, out=ifjmp0);
        And(a=instruction[14], b=zr, out=ifjmp1);
        And(a=instruction[15], b=pos, out=ifjmp2);
        Or(a=ifjmp0, b=ifjmp1, out=ifjmp01);
        Or(a=ifjmp01, b=ifjmp2, out=ifjmp);

        PC(in=AluOut, load=ifjmp, inc=true, reset=reset, out[0..14]=pc);
        
        And(a=instruction[0], b=instruction[12], out=writeM);
}
